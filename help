# Check if the router is properly exported from routes.js
cd /root/Core-Repository/backend
tail -10 routes.js | grep -E "(module.exports|router)"


# Test if the login route is actually registered
node -e "
const router = require('./routes');
console.log('Router methods:', router.stack?.map(r => r.route?.path + ' ' + Object.keys(r.route?.methods || {})).filter(Boolean));
"

# Test if the login route is actually registered
node -e "
const router = require('./routes');
console.log('Router methods:', router.stack?.map(r => r.route?.path + ' ' + Object.keys(r.route?.methods || {})).filter(Boolean));
"


# Check what routes.js actually contains around the login definition
cd /root/Core-Repository/backend
grep -n -A 10 -B 5 "router.post.*login" routes.js




# Test different HTTP methods
curl -X GET http://172.30.252.118:4000/login
curl -X POST http://172.30.252.118:4000/login  
curl -X PUT http://172.30.252.118:4000/login


# Test with and without trailing slash
curl -X POST http://172.30.252.118:4000/login/
curl -X POST http://172.30.252.118:4000//login

# Test case sensitivity
curl -X POST http://172.30.252.118:4000/Login


cd /root/Core-Repository/backend
node -e "
const routes = require('./routes');
console.log('Router type:', typeof routes);
console.log('Router constructor:', routes.constructor.name);
console.log('Has stack:', !!routes.stack);
if (routes.stack) {
  console.log('Number of routes:', routes.stack.length);
  routes.stack.forEach((layer, i) => {
    if (layer.route) {
      console.log(`Route ${i}: ${layer.route.path} [${Object.keys(layer.route.methods).join(',')}]`);
    }
  });
}
"



[root@sni1-ipclon7 backend]# tail -10 routes.js | grep -E "(module.exports|router)"
module.exports = router; 
[root@sni1-ipclon7 backend]# 


[root@sni1-ipclon7 backend]# node -e "
> const router = require('./routes');
> console.log('Router methods:', router.stack?.map(r => r.route?.path + ' ' + Object.keys(r.route?.methods || {})).filter(Boolean));
> "
Database connection attempt 1/3...
WARNING: Using generated JWT secret for development. Set JWT_SECRET environment variable for production.
Router methods: [
  '/health get',
  '/health/database get',
  '/login post',
  '/me get',
  '/change-password put',
  '/users get',
  '/users post',
  '/users/:id put',
  '/users/:id delete',
  '/users/:id/module-visibility get',
  '/users/:id/module-visibility put',
  '/change-logs get',
  '/carriers get',
  '/carriers/search get',
  '/carriers post',
  '/carriers/:id put',
  '/carriers/:id delete',
  '/carriers/:id/contacts get',
  '/carriers/:id/contacts post',
  '/carriers/:id/contacts/:contactId put',
  '/carriers/:id/contacts/:contactId delete',
  '/carriers/overdue-contacts get',
  '/carriers/:id/contacts/:contactId/approve post',
  '/repository_types get',
  '/carriers-legacy get',
  '/core_outages get',
  '/repository_types post',
  '/live_latency/:circuit_id get',
  '/live_latency/batch post',
  '/network_routes get',
  '/network_routes/:circuit_id get',
  '/network_routes post',
  '/network_routes/:circuit_id put',
  '/network_routes/:circuit_id delete',
  '/network_routes/:circuit_id/upload_kmz post',
  '/network_routes_export get',
  '/network_routes_search get',
  '/dark_fiber_details/:circuit_id get',
  '/dark_fiber_details post',
  '/dark_fiber_details/:id put',
  '/dark_fiber_details/:id delete',
  '/dark_fiber_details/:id/reserve post',
  '/dark_fiber_details/:id/release post',
  '/network_routes/:circuit_id/upload_test_results post',
  '/network_routes/:circuit_id/test_results_files get',
  '/network_routes/:circuit_id/download_test_results get',
  '/test_results_files/:id delete',
  '/locations get',
  '/locations post',
  '/locations/:id put',
  '/locations/:id delete',
  '/locations/:id/minimum-pricing put',
  '/locations/:id/capabilities get',
  '/locations/:id/capabilities post',
  '/exchange_rates get',
  '/exchange_rates post',
  '/exchange_rates/:id put',
  '/exchange-currencies get',
  '/network_design/find_path post',
  '/network_design/calculate_pricing post',
  '/network_design/generate_kmz post',
  '/network_design/save_search post',
  '/network_design/saved_searches get',
  '/network_design/saved_searches/:id get',
  '/network_design/saved_searches/:id delete',
  '/network_design/audit_logs get',
  '/network_design/audit_logs delete',
  '/network_design/audit_logs/export get',
  '/download_kmz/:filename get',
  '/cnx-colocation/locations get',
  '/cnx-colocation/locations/:id put',
  '/cnx-colocation/locations/:locationId/racks get',
  '/cnx-colocation/locations/:locationId/racks post',
  '/cnx-colocation/racks/:rackId put',
  '/cnx-colocation/racks/:rackId delete',
  '/cnx-colocation/racks/:rackId/clients get',
  '/cnx-colocation/racks/:rackId/clients post',
  '/cnx-colocation/clients/:clientId put',
  '/cnx-colocation/clients/:clientId delete',
  '/exchanges get',
  '/exchanges post',
  '/exchanges/:id put',
  '/exchanges/:id delete',
  '/exchanges/:id/feeds get',
  '/exchanges/:id/feeds post',
  '/exchanges/:exchangeId/feeds/:feedId put',
  '/exchanges/:exchangeId/feeds/:feedId delete',
  '/exchanges/:exchangeId/feeds/:feedId/download get',
  '/exchanges/:id/contacts get',
  '/exchanges/:id/contacts post',
  '/exchanges/:exchangeId/contacts/:contactId put',
  '/exchanges/:exchangeId/contacts/:contactId delete',
  '/exchanges/overdue-contacts get',
  '/exchanges/:exchangeId/contacts/:contactId/approve post',
  '/exchange-currencies get',
  '/bulk-upload/template/:module get',
  '/bulk-upload/database/:module get',
  '/bulk-upload/:module post',
  '/bulk-upload/history get',
  '/pricing_logic/config get',
  ... 16 more items
]
âœ… Connected to SQLite database successfully
âœ… Database connection test passed
[root@sni1-ipclon7 backend]# 


âœ… Database connection test passed
[root@sni1-ipclon7 backend]# cd /root/Core-Repository/backend
[root@sni1-ipclon7 backend]# grep -n -A 10 -B 5 "router.post.*login" routes.js
159-// ====================================
160-// AUTHENTICATION ENDPOINTS
161-// ====================================
162-
163-// Login endpoint
164:router.post('/login', async (req, res) => {
165-  const { username, password } = req.body;
166-  
167-  if (!username || !password) {
168-    return res.status(400).json({ error: 'Username and password are required' });
169-  }
170-  
171-  try {
172-    db.get('SELECT * FROM users WHERE username = ? AND status = "active"', [username], async (err, user) => {
173-      if (err) {
174-        return res.status(500).json({ error: 'Database error' });
[root@sni1-ipclon7 backend]# 


[root@sni1-ipclon7 backend]# curl -X GET http://172.30.252.118:4000/login
{"error":"Endpoint not found","type":"NOT_FOUND","retryable":false,"timestamp":"2025-07-22T19:37:28.279Z"}[root@sni1-ipclon7 backend]# curl -X POST http://172.30.252.118:4000/login  
{"error":"Username and password are required"}[root@sni1-ipclon7 backend]# curl -X PUT http://172.30.252.118:4000/login
{"error":"Endpoint not found","type":"NOT_FOUND","retryable":false,"timestamp":"2025-07-22T19:37:42.239Z"}[root@sni1-ipclon7 backend]# 

-ipclon7 backend]# curl -X POST http://172.30.252.118:4000/login/
{"error":"Username and password are required"}[root@sni1-ipclon7 backend]# curl -X POST http://172.30.252.118:4000//login
{"error":"Endpoint not found","type":"NOT_FOUND","retryable":false,"timestamp":"2025-07-22T19:38:10.621Z"}[root@sni1-ipclon7 backend]# 

-ipclon7 backend]# curl -X POST http://172.30.252.118:4000/Login
{"error":"Username and password are required"}[root@sni1-ipclon7 backend]# 