{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:4000';\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Network Routes\nexport const fetchRoutes = () => api.get('/network_routes').then(res => res.data);\nexport const searchRoutes = filters => api.get('/network_routes_search', {\n  params: filters\n}).then(res => res.data);\nexport const exportRoutesCSV = () => api.get('/network_routes_export', {\n  responseType: 'blob'\n});\nexport const addRoute = data => api.post('/network_routes', data);\nexport const editRoute = (id, data) => api.put(`/network_routes/${id}`, data);\nexport const deleteRoute = id => api.delete(`/network_routes/${id}`);\nexport const fetchRoute = id => api.get(`/network_routes/${id}`).then(res => res.data);\n\n// File uploads\nexport const uploadKMZ = (circuitId, file) => {\n  const formData = new FormData();\n  formData.append('kmz_file', file);\n  return api.post(`/network_routes/${circuitId}/upload_kmz`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n};\nexport const uploadTestResults = (circuitId, files) => {\n  console.log('🔧 uploadTestResults called with:', {\n    circuitId,\n    files,\n    filesCount: files === null || files === void 0 ? void 0 : files.length\n  });\n  if (!files || Array.isArray(files) && files.length === 0) {\n    console.log('❌ No files provided to upload');\n    return Promise.reject(new Error('No files provided'));\n  }\n  const formData = new FormData();\n  if (Array.isArray(files)) {\n    files.forEach((file, index) => {\n      console.log(`🔧 Appending file ${index + 1}:`, file.name, 'size:', file.size, 'type:', file.type);\n      formData.append('test_results_files', file);\n    });\n  } else {\n    console.log('🔧 Appending single file:', files === null || files === void 0 ? void 0 : files.name, 'size:', files === null || files === void 0 ? void 0 : files.size, 'type:', files === null || files === void 0 ? void 0 : files.type);\n    formData.append('test_results_files', files);\n  }\n\n  // Log FormData contents\n  console.log('🔧 FormData entries:');\n  for (let [key, value] of formData.entries()) {\n    console.log(`  ${key}:`, value instanceof File ? `File: ${value.name}` : value);\n  }\n  console.log('🔧 Making API call to:', `/network_routes/${circuitId}/upload_test_results`);\n  return api.post(`/network_routes/${circuitId}/upload_test_results`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }).then(response => {\n    console.log('✅ Upload successful:', response.data);\n    return response;\n  }).catch(error => {\n    var _error$response;\n    console.error('❌ Upload failed:', error);\n    console.error('❌ Error details:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  });\n};\nexport const getTestResultsFiles = circuitId => api.get(`/network_routes/${circuitId}/test_results_files`).then(res => res.data);\nexport const downloadTestResults = circuitId => {\n  return api.get(`/network_routes/${circuitId}/download_test_results`, {\n    responseType: 'blob'\n  }).then(response => {\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', `${circuitId}_test_results.zip`);\n    document.body.appendChild(link);\n    link.click();\n    link.remove();\n    window.URL.revokeObjectURL(url);\n  });\n};\nexport const deleteTestResultsFile = fileId => api.delete(`/test_results_files/${fileId}`);\n\n// Dark Fiber Details\nexport const getDarkFiberDetails = circuitId => api.get(`/dark_fiber_details/${circuitId}`).then(res => res.data);\nexport const addDarkFiberDetail = data => api.post('/dark_fiber_details', data);\nexport const editDarkFiberDetail = (id, data) => api.put(`/dark_fiber_details/${id}`, data);\nexport const deleteDarkFiberDetail = id => api.delete(`/dark_fiber_details/${id}`);\n\n// Reservations\nexport const reserveDarkFiber = (id, reservedBy) => {\n  return api.post(`/dark_fiber_details/${id}/reserve`, {\n    reserved_by: reservedBy\n  }).then(res => res.data);\n};\nexport const releaseDarkFiber = (id, releasedBy) => {\n  return api.post(`/dark_fiber_details/${id}/release`, {\n    released_by: releasedBy\n  }).then(res => res.data);\n};\n\n// Repository Types\nexport const getRepositoryTypes = () => api.get('/repository_types').then(res => res.data);\nexport const addRepositoryType = data => api.post('/repository_types', data);","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","fetchRoutes","get","then","res","data","searchRoutes","filters","params","exportRoutesCSV","responseType","addRoute","post","editRoute","id","put","deleteRoute","delete","fetchRoute","uploadKMZ","circuitId","file","formData","FormData","append","headers","uploadTestResults","files","console","log","filesCount","length","Array","isArray","Promise","reject","Error","forEach","index","name","size","type","key","value","entries","File","response","catch","error","_error$response","message","getTestResultsFiles","downloadTestResults","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","revokeObjectURL","deleteTestResultsFile","fileId","getDarkFiberDetails","addDarkFiberDetail","editDarkFiberDetail","deleteDarkFiberDetail","reserveDarkFiber","reservedBy","reserved_by","releaseDarkFiber","releasedBy","released_by","getRepositoryTypes","addRepositoryType"],"sources":["C:/Users/lines/OneDrive/Code/Core Repositary/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:4000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n});\r\n\r\n// Network Routes\r\nexport const fetchRoutes = () => api.get('/network_routes').then(res => res.data);\r\nexport const searchRoutes = (filters) => api.get('/network_routes_search', { params: filters }).then(res => res.data);\r\nexport const exportRoutesCSV = () => api.get('/network_routes_export', { responseType: 'blob' });\r\nexport const addRoute = (data) => api.post('/network_routes', data);\r\nexport const editRoute = (id, data) => api.put(`/network_routes/${id}`, data);\r\nexport const deleteRoute = (id) => api.delete(`/network_routes/${id}`);\r\nexport const fetchRoute = (id) => api.get(`/network_routes/${id}`).then(res => res.data);\r\n\r\n// File uploads\r\nexport const uploadKMZ = (circuitId, file) => {\r\n  const formData = new FormData();\r\n  formData.append('kmz_file', file);\r\n  return api.post(`/network_routes/${circuitId}/upload_kmz`, formData, {\r\n    headers: { 'Content-Type': 'multipart/form-data' }\r\n  });\r\n};\r\n\r\nexport const uploadTestResults = (circuitId, files) => {\r\n  console.log('🔧 uploadTestResults called with:', { circuitId, files, filesCount: files?.length });\r\n  \r\n  if (!files || (Array.isArray(files) && files.length === 0)) {\r\n    console.log('❌ No files provided to upload');\r\n    return Promise.reject(new Error('No files provided'));\r\n  }\r\n  \r\n  const formData = new FormData();\r\n  if (Array.isArray(files)) {\r\n    files.forEach((file, index) => {\r\n      console.log(`🔧 Appending file ${index + 1}:`, file.name, 'size:', file.size, 'type:', file.type);\r\n      formData.append('test_results_files', file);\r\n    });\r\n  } else {\r\n    console.log('🔧 Appending single file:', files?.name, 'size:', files?.size, 'type:', files?.type);\r\n    formData.append('test_results_files', files);\r\n  }\r\n  \r\n  // Log FormData contents\r\n  console.log('🔧 FormData entries:');\r\n  for (let [key, value] of formData.entries()) {\r\n    console.log(`  ${key}:`, value instanceof File ? `File: ${value.name}` : value);\r\n  }\r\n  \r\n  console.log('🔧 Making API call to:', `/network_routes/${circuitId}/upload_test_results`);\r\n  return api.post(`/network_routes/${circuitId}/upload_test_results`, formData, {\r\n    headers: { 'Content-Type': 'multipart/form-data' }\r\n  }).then(response => {\r\n    console.log('✅ Upload successful:', response.data);\r\n    return response;\r\n  }).catch(error => {\r\n    console.error('❌ Upload failed:', error);\r\n    console.error('❌ Error details:', error.response?.data || error.message);\r\n    throw error;\r\n  });\r\n};\r\n\r\nexport const getTestResultsFiles = (circuitId) => api.get(`/network_routes/${circuitId}/test_results_files`).then(res => res.data);\r\n\r\nexport const downloadTestResults = (circuitId) => {\r\n  return api.get(`/network_routes/${circuitId}/download_test_results`, {\r\n    responseType: 'blob'\r\n  }).then(response => {\r\n    const url = window.URL.createObjectURL(new Blob([response.data]));\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.setAttribute('download', `${circuitId}_test_results.zip`);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    link.remove();\r\n    window.URL.revokeObjectURL(url);\r\n  });\r\n};\r\n\r\nexport const deleteTestResultsFile = (fileId) => api.delete(`/test_results_files/${fileId}`);\r\n\r\n// Dark Fiber Details\r\nexport const getDarkFiberDetails = (circuitId) => api.get(`/dark_fiber_details/${circuitId}`).then(res => res.data);\r\nexport const addDarkFiberDetail = (data) => api.post('/dark_fiber_details', data);\r\nexport const editDarkFiberDetail = (id, data) => api.put(`/dark_fiber_details/${id}`, data);\r\nexport const deleteDarkFiberDetail = (id) => api.delete(`/dark_fiber_details/${id}`);\r\n\r\n// Reservations\r\nexport const reserveDarkFiber = (id, reservedBy) => {\r\n  return api.post(`/dark_fiber_details/${id}/reserve`, { reserved_by: reservedBy }).then(res => res.data);\r\n};\r\n\r\nexport const releaseDarkFiber = (id, releasedBy) => {\r\n  return api.post(`/dark_fiber_details/${id}/release`, { released_by: releasedBy }).then(res => res.data);\r\n};\r\n\r\n// Repository Types\r\nexport const getRepositoryTypes = () => api.get('/repository_types').then(res => res.data);\r\nexport const addRepositoryType = (data) => api.post('/repository_types', data); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}