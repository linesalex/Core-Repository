{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lines\\\\OneDrive\\\\Code\\\\Core-Repository\\\\frontend\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [permissions, setPermissions] = useState({});\n  const [moduleVisibility, setModuleVisibility] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('authToken'));\n  const [connectionError, setConnectionError] = useState(null);\n\n  // Helper function to detect connection errors\n  const isConnectionError = error => {\n    return error.code === 'ERR_NETWORK' || error.code === 'NETWORK_ERROR' || error.message === 'Network Error' || error.request && !error.response || error.response && error.response.status === 0;\n  };\n  const getErrorMessage = error => {\n    var _error$response, _error$response$data;\n    if (isConnectionError(error)) {\n      return 'Unable to connect to server. Please reach out to admin user for assistance.';\n    }\n    return ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message || 'An unexpected error occurred';\n  };\n\n  // Configure axios to include auth token\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [token]);\n\n  // Check if user is authenticated on app load\n  useEffect(() => {\n    const checkAuth = async () => {\n      if (token) {\n        try {\n          const response = await axios.get(`${process.env.REACT_APP_API_URL || `http://${window.location.hostname}:4000`}/me`);\n          setUser(response.data.user);\n          setPermissions(response.data.permissions);\n          setModuleVisibility(response.data.moduleVisibility || {});\n          setConnectionError(null); // Clear any previous connection errors\n        } catch (error) {\n          const errorMessage = getErrorMessage(error);\n          if (isConnectionError(error)) {\n            setConnectionError(errorMessage);\n            console.error('Connection error during auth check:', errorMessage);\n          } else {\n            console.error('Auth check failed:', errorMessage);\n            logout(); // Only logout for auth failures, not connection issues\n          }\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, [token]);\n  const login = async (username, password) => {\n    try {\n      setConnectionError(null); // Clear any previous connection errors\n\n      const response = await axios.post(`${process.env.REACT_APP_API_URL || `http://${window.location.hostname}:4000`}/login`, {\n        username,\n        password\n      });\n      const {\n        token,\n        user,\n        permissions,\n        moduleVisibility\n      } = response.data;\n      setToken(token);\n      setUser(user);\n      setPermissions(permissions);\n      setModuleVisibility(moduleVisibility || {});\n      localStorage.setItem('authToken', token);\n      return {\n        success: true\n      };\n    } catch (error) {\n      const errorMessage = getErrorMessage(error);\n      if (isConnectionError(error)) {\n        setConnectionError(errorMessage);\n        console.error('Connection error during login:', errorMessage);\n      } else {\n        console.error('Login failed:', errorMessage);\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    setPermissions({});\n    setModuleVisibility({});\n    localStorage.removeItem('authToken');\n    delete axios.defaults.headers.common['Authorization'];\n  };\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      await axios.put(`${process.env.REACT_APP_API_URL || `http://${window.location.hostname}:4000`}/change-password`, {\n        currentPassword,\n        newPassword\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Password change failed'\n      };\n    }\n  };\n  const clearConnectionError = () => {\n    setConnectionError(null);\n  };\n\n  // Check if user has permission for a specific action on a module\n  const hasPermission = (module, action) => {\n    if (!permissions[module]) return false;\n    return permissions[module][`can_${action}`] || false;\n  };\n\n  // Check if user has access to a module (both permissions and visibility)\n  const hasModuleAccess = module => {\n    return hasPermission(module, 'view') && isModuleVisible(module);\n  };\n\n  // Check if a module is visible to the user\n  const isModuleVisible = module => {\n    // If no specific visibility setting exists, default to visible\n    return moduleVisibility[module] !== false;\n  };\n\n  // Check if user has a specific role\n  const hasRole = role => {\n    return (user === null || user === void 0 ? void 0 : user.role) === role;\n  };\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return hasRole('administrator');\n  };\n\n  // Check if user is provisioner\n  const isProvisioner = () => {\n    return hasRole('provisioner');\n  };\n\n  // Check if user is read-only\n  const isReadOnly = () => {\n    return hasRole('read_only');\n  };\n  const value = {\n    user,\n    permissions,\n    moduleVisibility,\n    loading,\n    connectionError,\n    login,\n    logout,\n    changePassword,\n    clearConnectionError,\n    hasPermission,\n    hasModuleAccess,\n    isModuleVisible,\n    hasRole,\n    isAdmin,\n    isProvisioner,\n    isReadOnly,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"qa/X35XVAjgsxr4QJSGmjC9yRT8=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","permissions","setPermissions","moduleVisibility","setModuleVisibility","loading","setLoading","token","setToken","localStorage","getItem","connectionError","setConnectionError","isConnectionError","error","code","message","request","response","status","getErrorMessage","_error$response","_error$response$data","data","defaults","headers","common","checkAuth","get","process","env","REACT_APP_API_URL","window","location","hostname","errorMessage","console","logout","login","username","password","post","setItem","success","removeItem","changePassword","currentPassword","newPassword","put","_error$response2","_error$response2$data","clearConnectionError","hasPermission","module","action","hasModuleAccess","isModuleVisible","hasRole","role","isAdmin","isProvisioner","isReadOnly","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/lines/OneDrive/Code/Core-Repository/frontend/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [permissions, setPermissions] = useState({});\r\n  const [moduleVisibility, setModuleVisibility] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [token, setToken] = useState(localStorage.getItem('authToken'));\r\n  const [connectionError, setConnectionError] = useState(null);\r\n\r\n  // Helper function to detect connection errors\r\n  const isConnectionError = (error) => {\r\n    return (\r\n      error.code === 'ERR_NETWORK' ||\r\n      error.code === 'NETWORK_ERROR' ||\r\n      error.message === 'Network Error' ||\r\n      (error.request && !error.response) ||\r\n      (error.response && error.response.status === 0)\r\n    );\r\n  };\r\n\r\n  const getErrorMessage = (error) => {\r\n    if (isConnectionError(error)) {\r\n      return 'Unable to connect to server. Please reach out to admin user for assistance.';\r\n    }\r\n    return error.response?.data?.error || error.message || 'An unexpected error occurred';\r\n  };\r\n\r\n  // Configure axios to include auth token\r\n  useEffect(() => {\r\n    if (token) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    } else {\r\n      delete axios.defaults.headers.common['Authorization'];\r\n    }\r\n  }, [token]);\r\n\r\n  // Check if user is authenticated on app load\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      if (token) {\r\n        try {\r\n          const response = await axios.get(`${process.env.REACT_APP_API_URL || `http://${window.location.hostname}:4000`}/me`);\r\n          setUser(response.data.user);\r\n          setPermissions(response.data.permissions);\r\n          setModuleVisibility(response.data.moduleVisibility || {});\r\n          setConnectionError(null); // Clear any previous connection errors\r\n        } catch (error) {\r\n          const errorMessage = getErrorMessage(error);\r\n          \r\n          if (isConnectionError(error)) {\r\n            setConnectionError(errorMessage);\r\n            console.error('Connection error during auth check:', errorMessage);\r\n          } else {\r\n            console.error('Auth check failed:', errorMessage);\r\n            logout(); // Only logout for auth failures, not connection issues\r\n          }\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    checkAuth();\r\n  }, [token]);\r\n\r\n  const login = async (username, password) => {\r\n    try {\r\n      setConnectionError(null); // Clear any previous connection errors\r\n      \r\n      const response = await axios.post(`${process.env.REACT_APP_API_URL || `http://${window.location.hostname}:4000`}/login`, {\r\n        username,\r\n        password\r\n      });\r\n\r\n      const { token, user, permissions, moduleVisibility } = response.data;\r\n      \r\n      setToken(token);\r\n      setUser(user);\r\n      setPermissions(permissions);\r\n      setModuleVisibility(moduleVisibility || {});\r\n      \r\n      localStorage.setItem('authToken', token);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      const errorMessage = getErrorMessage(error);\r\n      \r\n      if (isConnectionError(error)) {\r\n        setConnectionError(errorMessage);\r\n        console.error('Connection error during login:', errorMessage);\r\n      } else {\r\n        console.error('Login failed:', errorMessage);\r\n      }\r\n      \r\n      return { \r\n        success: false, \r\n        error: errorMessage\r\n      };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setToken(null);\r\n    setUser(null);\r\n    setPermissions({});\r\n    setModuleVisibility({});\r\n    localStorage.removeItem('authToken');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  };\r\n\r\n  const changePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      await axios.put(`${process.env.REACT_APP_API_URL || `http://${window.location.hostname}:4000`}/change-password`, {\r\n        currentPassword,\r\n        newPassword\r\n      });\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { \r\n        success: false, \r\n        error: error.response?.data?.error || 'Password change failed' \r\n      };\r\n    }\r\n  };\r\n\r\n  const clearConnectionError = () => {\r\n    setConnectionError(null);\r\n  };\r\n\r\n  // Check if user has permission for a specific action on a module\r\n  const hasPermission = (module, action) => {\r\n    if (!permissions[module]) return false;\r\n    return permissions[module][`can_${action}`] || false;\r\n  };\r\n\r\n  // Check if user has access to a module (both permissions and visibility)\r\n  const hasModuleAccess = (module) => {\r\n    return hasPermission(module, 'view') && isModuleVisible(module);\r\n  };\r\n  \r\n  // Check if a module is visible to the user\r\n  const isModuleVisible = (module) => {\r\n    // If no specific visibility setting exists, default to visible\r\n    return moduleVisibility[module] !== false;\r\n  };\r\n\r\n  // Check if user has a specific role\r\n  const hasRole = (role) => {\r\n    return user?.role === role;\r\n  };\r\n\r\n  // Check if user is admin\r\n  const isAdmin = () => {\r\n    return hasRole('administrator');\r\n  };\r\n\r\n  // Check if user is provisioner\r\n  const isProvisioner = () => {\r\n    return hasRole('provisioner');\r\n  };\r\n\r\n  // Check if user is read-only\r\n  const isReadOnly = () => {\r\n    return hasRole('read_only');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    permissions,\r\n    moduleVisibility,\r\n    loading,\r\n    connectionError,\r\n    login,\r\n    logout,\r\n    changePassword,\r\n    clearConnectionError,\r\n    hasPermission,\r\n    hasModuleAccess,\r\n    isModuleVisible,\r\n    hasRole,\r\n    isAdmin,\r\n    isProvisioner,\r\n    isReadOnly,\r\n    isAuthenticated: !!user\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}