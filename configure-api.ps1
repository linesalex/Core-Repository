# Configure API URL for Network Inventory System
# This script sets up the frontend to connect to the backend automatically

param(
    [string]$ApiUrl = "",
    [switch]$AutoDetect = $false,
    [switch]$Help = $false
)

if ($Help) {
    Write-Host "Network Inventory System - API Configuration Script" -ForegroundColor Green
    Write-Host ""
    Write-Host "Usage:"
    Write-Host "  .\configure-api.ps1 -AutoDetect                    # Auto-detect current server IP"
    Write-Host "  .\configure-api.ps1 -ApiUrl http://server:4000     # Set specific API URL"
    Write-Host "  .\configure-api.ps1 -Help                          # Show this help"
    Write-Host ""
    Write-Host "Examples:"
    Write-Host "  .\configure-api.ps1 -AutoDetect"
    Write-Host "  .\configure-api.ps1 -ApiUrl http://172.30.252.118:4000"
    Write-Host "  .\configure-api.ps1 -ApiUrl http://localhost:4000"
    Write-Host ""
    exit 0
}

Write-Host "üîß Network Inventory System - API Configuration" -ForegroundColor Green
Write-Host ""

# Check if we're in the right directory
if (!(Test-Path "frontend\src\config.js")) {
    Write-Host "‚ùå Error: Please run this script from the Core-Repository root directory" -ForegroundColor Red
    Write-Host "   Current directory: $(Get-Location)" -ForegroundColor Yellow
    Write-Host "   Expected files: frontend\src\config.js" -ForegroundColor Yellow
    exit 1
}

# Auto-detect server IP if requested
if ($AutoDetect) {
    Write-Host "üîç Auto-detecting server configuration..." -ForegroundColor Yellow
    
    # Get network interfaces and find a suitable IP
    $networkInterfaces = Get-NetIPAddress -AddressFamily IPv4 | Where-Object { 
        $_.InterfaceAlias -notlike "*Loopback*" -and 
        $_.IPAddress -ne "127.0.0.1" -and
        $_.PrefixOrigin -eq "Dhcp" -or $_.PrefixOrigin -eq "Manual"
    } | Sort-Object InterfaceIndex
    
    if ($networkInterfaces.Count -gt 0) {
        $detectedIP = $networkInterfaces[0].IPAddress
        $ApiUrl = "http://${detectedIP}:4000"
        Write-Host "‚úÖ Detected IP address: $detectedIP" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Could not auto-detect IP address. Using localhost as fallback." -ForegroundColor Yellow
        $ApiUrl = "http://localhost:4000"
    }
}

# Validate API URL
if ([string]::IsNullOrEmpty($ApiUrl)) {
    Write-Host "‚ùå Error: No API URL provided" -ForegroundColor Red
    Write-Host "   Use -AutoDetect or -ApiUrl parameter" -ForegroundColor Yellow
    Write-Host "   Run with -Help for more information" -ForegroundColor Yellow
    exit 1
}

# Validate URL format
try {
    $uri = [System.Uri]$ApiUrl
    if ($uri.Scheme -notin @("http", "https")) {
        throw "Invalid scheme"
    }
} catch {
    Write-Host "‚ùå Error: Invalid API URL format: $ApiUrl" -ForegroundColor Red
    Write-Host "   Expected format: http://server:4000 or https://server:4000" -ForegroundColor Yellow
    exit 1
}

Write-Host "üéØ Configuring API URL: $ApiUrl" -ForegroundColor Cyan

# Create or update .env file
$envFile = "frontend\.env"
$envContent = "# Network Inventory System - Frontend Configuration`n"
$envContent += "# Generated by configure-api.ps1 on $(Get-Date)`n"
$envContent += "`n"
$envContent += "REACT_APP_API_URL=$ApiUrl`n"

try {
    $envContent | Out-File -FilePath $envFile -Encoding UTF8
    Write-Host "‚úÖ Created/updated: $envFile" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error creating .env file: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Test connectivity to backend
Write-Host ""
Write-Host "üîç Testing backend connectivity..." -ForegroundColor Yellow

try {
    $testUrl = "$ApiUrl/health"
    $response = Invoke-RestMethod -Uri $testUrl -Method GET -TimeoutSec 5
    Write-Host "‚úÖ Backend is reachable at: $testUrl" -ForegroundColor Green
    Write-Host "   Response: $($response.status)" -ForegroundColor Gray
} catch {
    Write-Host "‚ö†Ô∏è  Backend test failed: $($_.Exception.Message)" -ForegroundColor Yellow
    Write-Host "   This is normal if the backend is not running yet" -ForegroundColor Gray
    Write-Host "   Make sure to start the backend with: cd backend && npm start" -ForegroundColor Gray
}

Write-Host ""
Write-Host "üéâ Configuration Complete!" -ForegroundColor Green
Write-Host ""
Write-Host "Next steps:" -ForegroundColor Cyan
Write-Host "1. Start the backend:  cd backend && npm start" -ForegroundColor White
Write-Host "2. Start the frontend: cd frontend && npm start" -ForegroundColor White
Write-Host "3. Access the app at:  http://$(if ($AutoDetect -and $detectedIP) { $detectedIP } else { 'localhost' }):3000" -ForegroundColor White
Write-Host ""
Write-Host "Configuration saved to: $envFile" -ForegroundColor Gray
Write-Host "To reconfigure, run this script again or edit the .env file manually" -ForegroundColor Gray 